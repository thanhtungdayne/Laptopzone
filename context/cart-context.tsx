"use client";

import React, { createContext, useContext, useEffect, useState, type ReactNode } from "react";
import axios from "axios";
import { useAuth } from "@/context/auth-context";

// C·∫•u tr√∫c item trong gi·ªè h√†ng t·ª´ backend
interface CartItem {
  variantId: string;
  quantity: number;
  price: number;
  productName: string;
  productImage: string;
  attributes: { name: string; value: string }[];
}

// Ki·ªÉu d·ªØ li·ªáu cho context
interface CartContextType {
  items: CartItem[];
  total: number;
  addItem: (variantIdId: string, quantity: number) => Promise<void>;
  removeItem: (variantIdId: string) => Promise<void>;
  updateQuantity: (variantIdId: string, quantity: number) => Promise<void>;
  clearCart: () => Promise<void>;
  refreshCart: () => Promise<void>;
}

// Context m·∫∑c ƒë·ªãnh l√† null
const CartContext = createContext<CartContextType | null>(null);

// Provider ƒë·ªÉ bao b·ªçc to√†n ·ª©ng d·ª•ng
export function CartProvider({ children }: { children: ReactNode }) {
  const { user, isAuthenticated } = useAuth();
  const [items, setItems] = useState<CartItem[]>([]);
  const [total, setTotal] = useState(0);

  // H√†m fetch gi·ªè h√†ng t·ª´ backend
 const fetchCart = async () => {
  if (!user?._id) return;
  try {
    const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/cart/${user._id}`);
    console.log("üì¶ D·ªØ li·ªáu gi·ªè h√†ng tr·∫£ v·ªÅ:", res.data);

    let rawItems: any[] = [];

    if (res.data && res.data.items) {
      rawItems = res.data.items;
      setTotal(res.data.cartTotal || 0);
    } else if (res.data.result && res.data.result.items) {
      rawItems = res.data.result.items;
      setTotal(res.data.result.cartTotal || 0);
    } else {
      console.warn("‚ö†Ô∏è D·ªØ li·ªáu gi·ªè h√†ng kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", res.data);
      return;
    }

    console.log("üß™ Mapped cart items:", rawItems); // Th√™m d√≤ng n√†y
    setItems(rawItems);
  } catch (error) {
    console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
  }
};



  // G·ªçi l·∫°i khi user thay ƒë·ªïi
  useEffect(() => {
    if (isAuthenticated && user?._id) {
      fetchCart();
    } else {
      setItems([]);
      setTotal(0);
    }
  }, [user, isAuthenticated]);

  // Th√™m s·∫£n ph·∫©m v√†o gi·ªè
  const addItem = async (variantId: string, quantity: number) => {

    if (!user?.id) return;
    try {
      await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/cart/add`, {
        userId: user.id,
        variantId,
        quantity,
      });
      await fetchCart(); // c·∫≠p nh·∫≠t l·∫°i gi·ªè sau khi th√™m
    } catch (error) {
      console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
    }
  };

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
  const updateQuantity = async (variantId: string, quantity: number) => {
    if (!user?._id) return;
    console.log("G·ª≠i updateQuantity v·ªõi:", { userId: user?._id, variantId, quantity });
    try {
      await axios.put(`${process.env.NEXT_PUBLIC_API_URL}/cart/update`, {
        userId: user._id,
        variantId,
        quantity: Number(quantity),
      });
      await fetchCart();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
    }
  };

  // X√≥a 1 s·∫£n ph·∫©m
 const removeItem = async (variantId: string) => {
  if (!user?._id) return;
  try {
    console.log("üóëÔ∏è X√≥a variantId:", variantId);
    await axios.delete(`${process.env.NEXT_PUBLIC_API_URL}/cart/remove`, {
      data: {
        userId: user._id,   // ‚úÖ ƒë√∫ng field
        variantId: variantId, // ‚úÖ ƒë√∫ng t√™n field
      },
    });
    await fetchCart();
  } catch (error) {
    console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
  }
};


  // X√≥a to√†n b·ªô gi·ªè h√†ng
  const clearCart = async () => {
    if (!user?._id) return;
    try {
      await axios.delete(`${process.env.NEXT_PUBLIC_API_URL}/cart/clear/${user._id}`);
      await fetchCart();
    } catch (error) {
      console.error("L·ªói khi x√≥a to√†n b·ªô gi·ªè h√†ng:", error);
    }
  };

  return (
    <CartContext.Provider
      value={{ items, total, addItem, updateQuantity, removeItem, clearCart, refreshCart: fetchCart }}
    >
      {children}
    </CartContext.Provider>
  );
}

// Hook d√πng trong component
export function useCart() {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
}
